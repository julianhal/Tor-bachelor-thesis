$ diff -urN  vanilla/tor/src/core/or/circuitbuild.c modified/tor/src/core/or/circuitbuild.c
--- vanilla/tor/src/core/or/circuitbuild.c	2023-04-19 11:38:02.000000000 +0200
+++ modified/tor/src/core/or/circuitbuild.c	2023-04-19 11:35:33.000000000 +0200
@@ -258,7 +258,7 @@
  * If <b>verbose_names</b> is false, give hex digests; if <b>verbose_names</b>
  * is true, use $DIGEST=Name style names.
  */
-static char *
+char *
 circuit_list_path_impl(origin_circuit_t *circ, int verbose, int verbose_names)
 {
   crypt_path_t *hop;
@@ -384,7 +384,7 @@
 
 /** Pick all the entries in our cpath. Stop and return 0 when we're
  * happy, or return -1 if an error occurs. */
-static int
+int
 onion_populate_cpath(origin_circuit_t *circ)
 {
   int r = 0;
@@ -2069,7 +2069,7 @@
  * be used as an HS v3 rendezvous point.
  *
  * Return 0 if ok, -1 if circuit should be closed. */
-STATIC int
+int
 onion_pick_cpath_exit(origin_circuit_t *circ, extend_info_t *exit_ei,
                       int is_hs_v3_rp_circuit)
 {





$ diff -urN  vanilla/tor/src/core/or/circuitbuild.h modified/tor/src/core/or/circuitbuild.h
--- vanilla/tor/src/core/or/circuitbuild.h	2023-04-19 11:38:17.000000000 +0200
+++ modified/tor/src/core/or/circuitbuild.h	2023-04-19 11:35:53.000000000 +0200
@@ -16,10 +16,12 @@
 struct curve25519_public_key_t;
 
 int route_len_for_purpose(uint8_t purpose, extend_info_t *exit_ei);
+char *circuit_list_path_impl(origin_circuit_t *circ, int verbose, int verbose_names);
 char *circuit_list_path(origin_circuit_t *circ, int verbose);
 char *circuit_list_path_for_controller(origin_circuit_t *circ);
 void circuit_log_path(int severity, unsigned int domain,
                       origin_circuit_t *circ);
+int onion_populate_cpath(origin_circuit_t *circ);
 origin_circuit_t *origin_circuit_init(uint8_t purpose, int flags);
 origin_circuit_t *circuit_establish_circuit(uint8_t purpose,
                                             extend_info_t *exit,
@@ -40,6 +42,7 @@
                                                      int *need_uptime,
                                                      int *need_capacity));
 
+//int onion_pick_cpath_exit(origin_circuit_t *circ, extend_info_t *exit);
 int circuit_append_new_exit(origin_circuit_t *circ, extend_info_t *info);
 int circuit_extend_to_new_exit(origin_circuit_t *circ, extend_info_t *info);
 int circuit_can_use_tap(const origin_circuit_t *circ);
@@ -77,7 +80,7 @@
 
 STATIC int onion_extend_cpath(origin_circuit_t *circ);
 
-STATIC int
+int
 onion_pick_cpath_exit(origin_circuit_t *circ, extend_info_t *exit_ei,
                       int is_hs_v3_rp_circuit);
 STATIC int cpath_build_state_to_crn_flags(const cpath_build_state_t *state);







$ diff -urN  vanilla/tor/src/core/or/circuituse.c modified/tor/src/core/or/circuituse.c 
--- org_vanilla/circuituse.c	2023-04-19 11:38:28.000000000 +0200
+++ modified/tor/src/core/or/circuituse.c	2023-04-19 11:36:01.000000000 +0200
@@ -1880,7 +1880,7 @@
 
 /** Don't retry launching a new circuit if we try this many times with no
  * success. */
-#define MAX_CIRCUIT_FAILURES 5
+#define MAX_CIRCUIT_FAILURES 1000
 
 /** Launch a new circuit; see circuit_launch_by_extend_info() for
  * details on arguments. */





$ diff -urN  vanilla/tor/src/feature/control/control_cmd.c modified/tor/src/feature/control/control_cmd.c 
--- vanilla/tor/src/feature/control/control_cmd.c	2023-04-19 11:38:47.000000000 +0200
+++ modified/tor/src/feature/control/control_cmd.c	2023-04-19 11:36:09.000000000 +0200
@@ -11,6 +11,7 @@
 #define CONTROL_CMD_PRIVATE
 #define CONTROL_EVENTS_PRIVATE
 
+//#include "core/or/crypt_path_st.h"
 #include "core/or/or.h"
 #include "app/config/config.h"
 #include "lib/confmgt/confmgt.h"
@@ -719,6 +720,39 @@
   .kvline_flags=KV_OMIT_VALS
 };
 
+
+static const control_cmd_syntax_t findpath_syntax = {
+    .min_args = 0,
+    .max_args = 0,
+};
+
+
+/** Called when we get a FINDPATH message. Find a path but do not establish 
+ * a circuit. */
+static int
+handle_control_findpath(control_connection_t *conn, const control_cmd_args_t *args)
+{
+  origin_circuit_t *circ = NULL;
+  char *vpath;
+  (void)args;
+
+  // Find a path. (see circuit_establish_circuit())
+  circ = origin_circuit_init(CIRCUIT_PURPOSE_C_GENERAL, CIRCLAUNCH_NEED_CAPACITY);
+  if (onion_pick_cpath_exit(circ, NULL, 0) < 0 || 
+      onion_populate_cpath(circ) < 0) {
+    circuit_mark_for_close(TO_CIRCUIT(circ), END_CIRC_REASON_NOPATH);
+    connection_write_str_to_buf("551 Couldn't find a path.\r\n", conn);
+  } else {
+    vpath = circuit_list_path_impl(circ, 1, 1);
+    circuit_mark_for_close(TO_CIRCUIT(circ), END_CIRC_REASON_NONE);
+    circuit_reset_failure_count(0);
+    //router_set_status(circ->cpath->extend_info->identity_digest, 1);
+    connection_printf_to_buf(conn, "250 PATH %s \r\n", vpath);
+    tor_free(vpath);
+  }
+  return 0;
+}
+
 /** Called when we get an EXTENDCIRCUIT message.  Try to extend the listed
  * circuit, and report success or failure. */
 static int
@@ -2133,6 +2167,7 @@
   ONE_LINE(mapaddress, 0),
   ONE_LINE(getinfo, 0),
   ONE_LINE(extendcircuit, 0),
+  ONE_LINE(findpath, 0),
   ONE_LINE(setcircuitpurpose, 0),
   OBSOLETE(setrouterpurpose),
   ONE_LINE(attachstream, 0),
